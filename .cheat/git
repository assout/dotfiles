# To set your identity:
git config --global user.name "John Doe"
git config --global user.email johndoe@example.com

# To set your editor:
git config --global core.editor emacs

# To enable color:
git config --global color.ui true

# To stage all changes for commit:
git add --all

# To stash changes locally, this will keep the changes in a separate changelist
# called stash and the working directory is cleaned. You can apply changes
# from the stash anytime
git stash

# To stash changes with a message
git stash save "message"

# To list all the stashed changes
git stash list

# To apply the most recent change and remove the stash from the stash list
git stash pop

# To apply any stash from the list of stashes. This does not remove the stash
# from the stash list
git stash apply stash@{6}

# To commit staged changes
git commit -m "Your commit message"

# To edit previous commit message
git commit --amend

# Git commit in the past
git commit --date="`date --date='2 day ago'`"
git commit --date="Jun 13 18:30:25 IST 2015"
# more recent versions of Git also support --date="2 days ago" directly

# To change the date of an existing commit
git filter-branch --env-filter \
    'if [ $GIT_COMMIT = 119f9ecf58069b265ab22f1f97d2b648faf932e0 ]
     then
         export GIT_AUTHOR_DATE="Fri Jan 2 21:38:53 2009 -0800"
         export GIT_COMMITTER_DATE="Sat May 19 01:01:01 2007 -0700"
     fi'

# To removed staged and working directory changes
git reset --hard

# To go 2 commits back
git reset --hard HEAD~2

# To remove untracked files
git clean -f -d

# To remove untracked and ignored files
git clean -f -d -x

# To push to the tracked master branch:
git push origin master

# To push to a specified repository:
git push git@github.com:username/project.git

# To delete the branch "branch_name"
git branch -D branch_name

# To make an exisiting branch track a remote branch
git branch -u upstream/foo

# To see who commited which line in a file
git blame filename

# To sync a fork with the master repo:
git remote add upstream git@github.com:name/repo.git    # Set a new repo
git remote -v                                           # Confirm new remote repo
git fetch upstream                                      # Get branches
git branch -va                                          # List local - remote branches
git checkout master                                     # Checkout local master branch
git checkout -b new_branch                              # Create and checkout a new branch
git merge upstream/master                               # Merge remote into local repo
git show 83fb499                                        # Show what a commit did.
git show 83fb499:path/fo/file.ext                       # Shows the file as it appeared at 83fb499.
git diff branch_1 branch_2                              # Check difference between branches
git log                                                 # Show all the commits
git status                                              # Show the changes from last commit

# Commit history of a set of files
git log --pretty=email --patch-with-stat --reverse --full-index -- Admin\*.py > Sripts.patch

# Import commits from another repo
git --git-dir=../some_other_repo/.git format-patch -k -1 --stdout <commit SHA> | git am -3 -k

# View commits that will be pushed
git log @{u}..

# View changes that are new on a feature branch
git log -p feature --not master
git diff master...feature

# Interactive rebase for the last 7 commits
git rebase -i @~7

# Diff files WITHOUT considering them a part of git
# This can be used to diff files that are not in a git repo!
git diff --no-index path/to/file/A path/to/file/B

# To pull changes while overwriting any local commits
git fetch --all
git reset --hard origin/master

# Update all your submodules
git submodule update --init --recursive

# Perform a shallow clone to only get latest commits
# (helps save data when cloning large repos)
git clone --depth 1 <remote-url>

# To unshallow a clone
git pull --unshallow

# Create a bare branch (one that has no commits on it)
git checkout --orphan branch_name

# Checkout a new branch from a different starting point
git checkout -b master upstream/master

# Remove all stale branches (ones that have been deleted on remote)
# So if you have a lot of useless branches, delete them on Github and then run this
git remote prune origin

# The following can be used to prune all remotes at once
git remote prune $(git remote | tr '\n' ' ')

# Revisions can also be identified with :/text
# So, this will show the first commit that has "cool" in their message body
git show :/cool

# Undo parts of last commit in a specific file
git checkout -p HEAD^ -- /path/to/file

# Revert a commit and keep the history of the reverted change as a separate revert commit
git revert <commit SHA>

# Pich a commit from a branch to current branch. This is different than merge as
# this just applies a single commit from a branch to current branch
git cherry-pick <commit SHA1>

### add - ステージングする

# ファイルごとに対話的に選択する
git add -i

# 対象を範囲指定
Update>> 1,2,4
Update>> 1-4

# 部分的に追加する
# Refs. [Gitで部分的にコミットする方法 - Qiita](http://qiita.com/miyohide/items/79ab0ff3b3852289a6be)
git add -p

# 変更のみ追加する(新規追加はしない)
# Refs: [git add -A と git add . と git add -u の違い - nekovaの日記](http://nekova.hatenablog.com/entry/2013/02/20/013909)
git add -u

# 無視されるファイルを強制的にインデックスに追加する
git add -f

### commit - コミットする

# 簡易コメントでコミット
git commit -m "commit reason"
git commit -m "commit reason" -m "seconds reason"

# 作業ツリーの変更をすべてコミットする
git commit -a

# ファイルを指定してコミット
git commit somefile

# コミット内容を訂正
git commit -m "コメント" -a
# 修正しステージング
git commit --amend -a
# コミットコメントを修正(amend)
git commit --amend -m "修正後コメント"
# 詳細(diff)を表示してコミット
git commit -v
# 以前のコミットメッセージを利用する
git commit -c HEAD
git commit -c HEAD^

### diff - 差分を見る

# 作業ツリーとステージングエリア間
git diff

# ステージングエリアとリポジトリ間
git diff --cached

# 作業ツリーとリポジトリ間
git diff HEAD

# ローカルブランチとリモートブランチの間
git diff origin (リモート設定名による？)

# バージョン間の差分を見る
git diff <revision>
git diff HEAD^

# ファイル名のみ
git diff --name-only
# パス指定
git diff *main*

### branch, checkout - ブランチを操作する


git branch new-feature # ブランチを作成する

# ブランチを切り替える
git checkout new-feature

# ブランチを削除する
git branch -d <branchname>

# 別の名前に変更する
git branch -m master master_after

# ブランチ作成とチェックアウトを同時にする
git checkout -b alternate master

# 別のブランチで作業してしまい、途中でブランチ作成する場合
git checkout -b working

Refs: [ブランチを作り忘れた時 # Qiita](http://qiita.com/kkabetani/items/edc69a806095e4fc489c)

# リモートのブランチをcheckoutする
git checkout -b new-feature origin/new-feature

# マージでコンフリクトした際にどちらかのブランチの内容を適用 (Git merge, conflict, checkout, --ours, --theirs)
# マージ先を優先する場合:
git checkout --ours hoge.txt

# マージ元を優先する場合:
git checkout --theirs hoge.txt

### merge # マージする

# マージには三種類ある
# 直接マージ(定番)
git checkout master
git merge alternate

# 圧縮コミット(squash)
git checkout master
git merge --squash alternate
git commit -m "reson"

# チェリーピック(つまみ食い)
割愛
# 競合を解消する
git merge alternate
git mergetool
git commit
\* 簡単ならmergetool使わなくても良い
\* commitメッセージは勝手に入れてくれる

# conflictするか確かめるだけ
git merge ${branch} --no-commit
# git merge origin/master --no-commit
git merge --abort

### log # コミットログを見る

# 変更のあったファイル名を表示する
git log --stat

# 一行で表示
git log --oneline
git log --pretty=oneline # ちょっと↑と表示は違う。

# 特定のコミッターのログを見る
git log --committer=hoge

# 特定のリビジョンから始まるログを見る
git log <revision>

# パッチ形式のコミットログを表示する
git log -p

# 過去のコミットから対象文字列を含むコミットを検索
git log -S hoge
git log -Shoge

# パッチ形式で表示
git log -Shoge -p

# Git logでコミットメッセージを検索する方法(コミットログでフィルタリング)
git log --grep hoge
git log --grep hoge -p

# 特定のパス(ファイル、ディレクトリ)の履歴を見る
git log -# ./foo ./bar
git log -# .
git log -# *.xml

### show # コミットログと変更点を確認
git show HEAD

# 特定のリビジョンのファイルを見たい
git show REVESION_HASH:FILE_PATH

### blame # 誰のコミットか確認する

# 行番号を指定
git blame -L 12,13 somefile

### revert # コミットを取り消す(訂正をコミットする)
git revert HEAD

# 複数取り消し、まとめてコミットする
git revert -n HEAD
git revert -n <rev>
git revert -n <rev>
git commit

### reset # 変更をリセットする

# 以前のコミットをすべてステージングエリアに戻す(i.e. 直前のコミットを取り消したい(コミットのみ取り消し)
git reset --soft

# リポジトリおよび作業ツリーからコミットを消し去る(要注意)
# 直前のコミットを取り消したい(マルっと消したい)
git reset --hard HEAD^

# コミット後の変更を全部消したい
git reset --hard HEAD

# addを取り消したい
git reset --mixed HEAD
or
git reset HEAD

# リセットを取り消したい
git reset --hard ORIG_HEAD

Refs: [\[git reset (--hard/--soft)\]ワーキングツリー、インデックス、HEADを使いこなす方法 # Qiita](http://qiita.com/shuntaro_tamura/items/db1aef9cf9d78db50ffe)

### rebase # 履歴を書き換える

# pick # コミットの順番を変える
git rebase -i HEAD~3
pick xx..
pick yy..
pick zz..
-> change
pick zz..
pick xx..
pick yy..
保存して終了

# squash # コミットを圧縮
git rebase -i HEAD~3
pick xx..
pick yy..
pick zz..
-> change
pick xx..
squash yy..
pick zz..
保存して終了(xxとyyが圧縮)

# edit # コミット内容を変更する
git rebase -i HEAD^^
// 対象をedit
// 変更内容をadd
git commit --amend
git rebase --continue

Refs: [Git ふたつ以上前のコミットにはcommit--amend できないの-Qiita](http://qiita.com/YumaInaura/items/4f00367fc1a140b61bc7)

# reword # コミットメッセージを変える
git rebase -i HEAD~3
reword xx..

# 元に戻す(rebase直後の場合のみ!)
git reset --hard ORIG_HEAD

# 自動fix(--autofixup)を使う
git commit --fixup=HEAD~1 # 既存コミットを指定する
git rebase -i --autosquash HEAD~4

### stash # 作業を隠す

# 未追跡(untracked)ファイルも対象にする
git stash -u

### clean # 追跡対象外ファイルの削除

# 確認
git clean -n

# 削除
git clean -f

# ディレクトリも対象
git clean -d

## Remote

# リモートリポジトリ一覧を確認
git remote
git remote -v

# clone # クローンする
git clone git@github.com:assout/dotfiles.git

# ディレクトリを指定する
git clone git@github.com:assout/dotfiles.git hoge

# ブランチを指定する
git clone -b foo_branch git@github.com:assout/dotfiles.git

# fetch # 取得する
git fetch

# すべてのリモートを取得
git fetch --all

# ブランチの削除情報も取得
git fetch --prune

# push # 更新する
git push

# 強制
git push -f

# 強制(最後に fetch したタイミング以降に他人が push していたら失敗する)
git push --force-with-lease

# vim:set filetype=sh:

