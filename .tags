!_TAG_FILE_SORTED	2	/0=unsorted, 1=sorted, 2=foldcase/
mybash__browse_by_ghq	/d/admin/.ghq/github.com/assout/dotfiles/.bashrc	/^	mybash__browse_by_ghq() { ghq list | cut -d "\/" -f 2,3 | ${selector} | xargs -r hub browse; }$/;"	f	language:Sh
mybash__browse_by_ghq	/d/admin/.ghq/github.com/assout/dotfiles/.bashrc	/^	mybash__browse_by_ghq() { local t; t=$(ghq list | ${selector}) && (cd "${GHQ_ROOT}\/${t}" && mybash__browse_current_project); }$/;"	f	language:Sh
mybash__browse_current_project	/d/admin/.ghq/github.com/assout/dotfiles/.bashrc	/^	mybash__browse_current_project() { git remote -v | head -1 | cut -d" " -f 2 | cut -d" " -f 1 | sed "s?\\.git\\$??" | sed "s?\\.wiki\\$?\/wikis\/home?" | xargs start; }$/;"	f	language:Sh
mybash__browse_current_project	/d/admin/.ghq/github.com/assout/dotfiles/.bashrc	/^	mybash__browse_current_project() { hub browse; }$/;"	f	language:Sh
mybash__cdls	/d/admin/.ghq/github.com/assout/dotfiles/.bashrc	/^mybash__cdls() {$/;"	f	language:Sh
mybash__cd_parent	/d/admin/.ghq/github.com/assout/dotfiles/.bashrc	/^mybash__cd_parent() {$/;"	f	language:Sh
mybash__dir	/d/admin/.ghq/github.com/assout/dotfiles/.bashrc	/^mybash__dir() { local t; t="$(mybash__find_dir "$@")"; [ -d "${t}" ] && cd "${t}"; }$/;"	f	language:Sh
mybash__dir_git_root	/d/admin/.ghq/github.com/assout/dotfiles/.bashrc	/^mybash__dir_git_root() { cd "$(git rev-parse --show-toplevel)"; }$/;"	f	language:Sh
mybash__dir_in_project	/d/admin/.ghq/github.com/assout/dotfiles/.bashrc	/^mybash__dir_in_project() { mybash__dir_git_root && mybash__dir "$@" || cd -; }$/;"	f	language:Sh
mybash__dir_recent	/d/admin/.ghq/github.com/assout/dotfiles/.bashrc	/^mybash__dir_recent() { local t; t=$(sed -n 2,\\$p ~\/.cache\/neomru\/directory | ${selector}) && cd "${t}"; }$/;"	f	language:Sh
mybash__dir_upper	/d/admin/.ghq/github.com/assout/dotfiles/.bashrc	/^mybash__dir_upper() { local t; t=$(p="..\/..\/"; for d in $(pwd | tr -s "\/" "\\n" | tac | sed "1d") ; do echo "${p}${d}"; p=${p}..\/; done | fzy) && cd "${t}"; }$/;"	f	language:Sh
mybash__explorer	/d/admin/.ghq/github.com/assout/dotfiles/.bashrc	/^mybash__explorer() {$/;"	f	language:Sh
mybash__explorer_in_project	/d/admin/.ghq/github.com/assout/dotfiles/.bashrc	/^mybash__explorer_in_project() { (mybash__dir_git_root; mybash__explorer 1000); }$/;"	f	language:Sh
mybash__explorer_recent_dir	/d/admin/.ghq/github.com/assout/dotfiles/.bashrc	/^mybash__explorer_recent_dir() { sed -n 2,\\$p ~\/.cache\/neomru\/directory | ${selector} | xargs -r ${opener}; }$/;"	f	language:Sh
mybash__file	/d/admin/.ghq/github.com/assout/dotfiles/.bashrc	/^mybash__file() { mybash__find_selector "$@" | xargs -rI{} tmux send-keys " "{} C-a; }$/;"	f	language:Sh
mybash__file_in_project	/d/admin/.ghq/github.com/assout/dotfiles/.bashrc	/^mybash__file_in_project() { (mybash__dir_git_root; mybash__file "$@"); }$/;"	f	language:Sh
mybash__file_recent	/d/admin/.ghq/github.com/assout/dotfiles/.bashrc	/^mybash__file_recent() { ${selector} < ~\/.cache\/ctrlp\/mru\/cache.txt | xargs -rI{} tmux send-keys " "{} C-a; }$/;"	f	language:Sh
mybash__find	/d/admin/.ghq/github.com/assout/dotfiles/.bashrc	/^mybash__find() {$/;"	f	language:Sh
mybash__find_dir	/d/admin/.ghq/github.com/assout/dotfiles/.bashrc	/^mybash__find_dir() {$/;"	f	language:Sh
mybash__find_selector	/d/admin/.ghq/github.com/assout/dotfiles/.bashrc	/^mybash__find_selector() {$/;"	f	language:Sh
mybash__find_selector_reverse	/d/admin/.ghq/github.com/assout/dotfiles/.bashrc	/^mybash__find_selector_reverse() {$/;"	f	language:Sh
mybash__ghq_cd	/d/admin/.ghq/github.com/assout/dotfiles/.bashrc	/^mybash__ghq_cd() { local t; t=$(find "${GHQ_ROOT}" -maxdepth 3 -mindepth 3 | ${selector}) && mybash__with_history "cd ${t}"; } # Note deprecate `ghq list` because slow in msys2$/;"	f	language:Sh
mybash__ghq_status	/d/admin/.ghq/github.com/assout/dotfiles/.bashrc	/^mybash__ghq_status() { for t in $(ghq list -p "$@") ; do (cd "${t}" && echo "${t}" && git status) done; } # 'g'hq 's'tatus.$/;"	f	language:Sh
mybash__ghq_update	/d/admin/.ghq/github.com/assout/dotfiles/.bashrc	/^mybash__ghq_update() { ghq list "$@" | sed -e "s?^?https:\/\/?" | xargs -n 1 -P 10 -I% sh -c "ghq get -u %"; } # 'g'hq 'u'pdate.$/;"	f	language:Sh
mybash__git_branch	/d/admin/.ghq/github.com/assout/dotfiles/.bashrc	/^mybash__git_branch() { git branch -a | ${selector} | tr -d ' ' | tr -d '*' | xargs -rI{} tmux send-keys " "{} C-a; }$/;"	f	language:Sh
mybash__git_ls_files	/d/admin/.ghq/github.com/assout/dotfiles/.bashrc	/^mybash__git_ls_files() { git ls-files "${@}" | ${selector} | xargs -rI{} tmux send-keys " "{} C-a; }$/;"	f	language:Sh
mybash__grep	/d/admin/.ghq/github.com/assout/dotfiles/.bashrc	/^mybash__grep() { local t; t=($($1 -n "${@:2}" | ${selector} | awk -F : '{print "-c " $2 " " $1}')); [ "${#t[@]}" != 0 ] && ${vim} "${t[@]}"; }$/;"	f	language:Sh
mybash__grep_recent	/d/admin/.ghq/github.com/assout/dotfiles/.bashrc	/^mybash__grep_recent() { mybash__grep "grep" "${@:-.}" $(cat ~\/.cache\/ctrlp\/mru\/cache.txt) 2>\/dev\/null; }$/;"	f	language:Sh
mybash__history	/d/admin/.ghq/github.com/assout/dotfiles/.bashrc	/^mybash__history() {$/;"	f	language:Sh
mybash__log_cd_dir	/d/admin/.ghq/github.com/assout/dotfiles/.bashrc	/^mybash__log_cd_dir() { cd "${log_dir}"; }$/;"	f	language:Sh
mybash__log_grep	/d/admin/.ghq/github.com/assout/dotfiles/.bashrc	/^mybash__log_grep() { local a; if [ $# -eq 0 ] ; then read -p "Grep word:" a ; else a=$* ; fi; [ -n "${a}" ] && ${vim} -c ":LogGrep ${a}"; }$/;"	f	language:Sh
mybash__log_open	/d/admin/.ghq/github.com/assout/dotfiles/.bashrc	/^mybash__log_open() { local l; l=$(mybash__find_selector_reverse "${log_dir}"\/* -printf "%f\\n") && ${vim} "${log_dir}\/${l}"; }$/;"	f	language:Sh
mybash__man_japanese	/d/admin/.ghq/github.com/assout/dotfiles/.bashrc	/^mybash__man_japanese() {$/;"	f	language:Sh
mybash__memo_cd_dir	/d/admin/.ghq/github.com/assout/dotfiles/.bashrc	/^mybash__memo_cd_dir() { cd "${memo_dir}"; }$/;"	f	language:Sh
mybash__memo_grep	/d/admin/.ghq/github.com/assout/dotfiles/.bashrc	/^mybash__memo_grep() { local a; if [ $# -eq 0 ] ; then read -p "Grep word:" a ; else a=$* ; fi; [ -n "${a}" ] && ${vim} -c ":MemoGrep ${a}"; }$/;"	f	language:Sh
mybash__memo_list	/d/admin/.ghq/github.com/assout/dotfiles/.bashrc	/^mybash__memo_list() { local l; l=$(mybash__find_selector "${memo_dir}\/"*) && ${vim} "${l}"; }$/;"	f	language:Sh
mybash__memo_new	/d/admin/.ghq/github.com/assout/dotfiles/.bashrc	/^mybash__memo_new() { ${vim} -c ":MemoNew $*"; }$/;"	f	language:Sh
mybash__note_cd_dir	/d/admin/.ghq/github.com/assout/dotfiles/.bashrc	/^mybash__note_cd_dir() { cd "${note_dir}"; }$/;"	f	language:Sh
mybash__note_grep	/d/admin/.ghq/github.com/assout/dotfiles/.bashrc	/^mybash__note_grep() { local a; if [ $# -eq 0 ] ; then read -p "Grep word:" a ; else a=$* ; fi; [ -n "${a}" ] && ${vim} -c ":NoteGrep ${a}"; }$/;"	f	language:Sh
mybash__note_list	/d/admin/.ghq/github.com/assout/dotfiles/.bashrc	/^mybash__note_list() { local l; l=$(mybash__find_selector_reverse "${note_dir}\/"*) && ${vim} "${l}"; }$/;"	f	language:Sh
mybash__note_new	/d/admin/.ghq/github.com/assout/dotfiles/.bashrc	/^mybash__note_new() { ${vim} -c ":NoteNew $*"; }$/;"	f	language:Sh
mybash__open	/d/admin/.ghq/github.com/assout/dotfiles/.bashrc	/^mybash__open() { mybash__find_selector "$@" | xargs -r "${opener}"; }$/;"	f	language:Sh
mybash__open_in_project	/d/admin/.ghq/github.com/assout/dotfiles/.bashrc	/^mybash__open_in_project() { (mybash__dir_git_root; mybash__open "$@"); }$/;"	f	language:Sh
mybash__open_recent_file	/d/admin/.ghq/github.com/assout/dotfiles/.bashrc	/^mybash__open_recent_file() { sed -n 2,\\$p ~\/.cache\/ctrlp\/mru\/cache.txt | ${selector} | xargs -r ${opener}; }$/;"	f	language:Sh
mybash__select_alias	/d/admin/.ghq/github.com/assout/dotfiles/.bashrc	/^mybash__select_alias() { mybash__with_history "eval $(t=$(alias | sed -r "s\/^alias \/\/" | sort -f | ${selector}); echo "${t}" | cut -d'=' -f 1)"; }$/;"	f	language:Sh
mybash__select_cheat	/d/admin/.ghq/github.com/assout/dotfiles/.bashrc	/^mybash__select_cheat() {$/;"	f	language:Sh
mybash__select_function	/d/admin/.ghq/github.com/assout/dotfiles/.bashrc	/^mybash__select_function() { mybash__with_history "eval $(declare -F | cut -d" " -f3 | grep -v "^_" | sort -f | ${selector} | cut -d'=' -f 1)"; }$/;"	f	language:Sh
mybash__select_send_key	/d/admin/.ghq/github.com/assout/dotfiles/.bashrc	/^mybash__select_send_key() {$/;"	f	language:Sh
mybash__ssh_by_config	/d/admin/.ghq/github.com/assout/dotfiles/.bashrc	/^mybash__ssh_by_config() {$/;"	f	language:Sh
mybash__ssh_by_hosts	/d/admin/.ghq/github.com/assout/dotfiles/.bashrc	/^mybash__ssh_by_hosts() {$/;"	f	language:Sh
mybash__todo_add	/d/admin/.ghq/github.com/assout/dotfiles/.bashrc	/^mybash__todo_add() { todo.sh add "$*"; }$/;"	f	language:Sh
mybash__todo_cd_dir	/d/admin/.ghq/github.com/assout/dotfiles/.bashrc	/^mybash__todo_cd_dir() { cd ~\/Documents\/todo\/; }$/;"	f	language:Sh
mybash__todo_do	/d/admin/.ghq/github.com/assout/dotfiles/.bashrc	/^mybash__todo_do() { todo.sh -p list | sed "\\$d" | sed "\\$d" | ${selector} | cut -d " " -f 1 | xargs -r "todo.sh" "do"; }$/;"	f	language:Sh
mybash__todo_grep	/d/admin/.ghq/github.com/assout/dotfiles/.bashrc	/^mybash__todo_grep() { local a; if [ $# -eq 0 ] ; then read -p "Grep word:" a ; else a=$* ; fi; [ -n "${a}" ] && ${vim} -c ":TodoGrep ${a}"; }$/;"	f	language:Sh
mybash__todo_open	/d/admin/.ghq/github.com/assout/dotfiles/.bashrc	/^mybash__todo_open() { local t; t=$(todo.sh -p list | sed "\\$d" | sed "\\$d" | ${selector} | cut -d " " -f 1) && todo.sh note "${t}"; }$/;"	f	language:Sh
mybash__vim	/d/admin/.ghq/github.com/assout/dotfiles/.bashrc	/^mybash__vim() { local t; t=$(mybash__find_selector "$@") && ${vim} "${t}"; }$/;"	f	language:Sh
mybash__vim_in_project	/d/admin/.ghq/github.com/assout/dotfiles/.bashrc	/^mybash__vim_in_project() { (mybash__dir_git_root; mybash__vim "$@"); }$/;"	f	language:Sh
mybash__vim_most_recent	/d/admin/.ghq/github.com/assout/dotfiles/.bashrc	/^mybash__vim_most_recent() { ${vim} "$(head -1 ~\/.cache\/ctrlp\/mru\/cache.txt)"; }$/;"	f	language:Sh
mybash__vim_recent	/d/admin/.ghq/github.com/assout/dotfiles/.bashrc	/^mybash__vim_recent() { local t; t=$(${selector} < ~\/.cache\/ctrlp\/mru\/cache.txt) && ${vim} "${t}"; }$/;"	f	language:Sh
mybash__with_history	/d/admin/.ghq/github.com/assout/dotfiles/.bashrc	/^mybash__with_history() {$/;"	f	language:Sh
