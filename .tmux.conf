# Index {{{1
# * Setting options
# * Setting window options
# * Key-bindings
#
# ref. <http://manpages.ubuntu.com/manpages/trusty/en/man1/tmux.1.html>
# ref. <http://qiita.com/succi0303/items/cb396704493476373edf>
#
# TODOs
# * TODO: prefix+hogeとprefix+Ctrl+hogeを二重で定義していくのだるい
# * TODO: Painサイズ均一化
# * TODO: Pain Self Only(C-o的な)
#
# }}}1

# Section; Setting Optionss {{{1
set -g prefix C-s # prefixキー変更する
set -g history-limit 10000 # 履歴数を変更
set -gs escape-time 0 # キーストロークのディレイを減らす
set -g default-terminal "screen-256color" # 256色端末を使用する

# アクティブなペインを目立たせる
set -g pane-active-border-fg white
set -g pane-active-border-bg yellow

# ステータスバーを設定する
## ステータスバー位置
set -g status-position bottom
## ステータスバーの色を設定する
set -g status-fg white
set -g status-bg black
## 左パネルを設定する
set -g status-left-length 40
set -g status-left "[#[fg=blue]Session:#S #[fg=green]Window:#I #[fg=yellow]Pain:#P#[fg=default]] "
## 右パネルを設定する
set -g status-right "%y/%m/%d(%a) %H:%M"
## リフレッシュの間隔を設定する(デフォルト 15秒)
set -g status-interval 15
# ヴィジュアルノーティフィケーションを有効にする
set -g visual-activity on

# マウス有効 TODO: 判定分dirty(要はV2.1以上)
if-shell "[[ `tmux -V` == *[2-9].[0-9] ]]" 'set -g mouse on'
# }}}1

# Section; Setting window options {{{1
# ウィンドウリストの色を設定する
setw -g window-status-fg green
setw -g window-status-bg default
setw -g window-status-attr default
# アクティブなウィンドウを目立たせる
setw -g window-status-current-fg black
setw -g window-status-current-bg green
setw -g window-status-current-attr underscore
# ウィンドウ名を変更 TODO: ログインホスト(ssh,telent)名を表示したい @office
setw -g window-status-format "#I:#W#F "
setw -g window-status-current-format "#I:#W#F "
## ヴィジュアルノーティフィケーションを有効にする
setw -g monitor-activity on

## コピーモードの操作をvi風に設定する+クリップボード共有する
setw -g mode-keys vi
# }}}1

# Section; Key-bindings {{{1
bind C-s send-prefix

# 設定ファイルをリロードする
bind r source-file ~/.tmux.conf \; display "Reloaded!"
bind ^r source-file ~/.tmux.conf \; display "Reloaded!"

# ウィンドウ作成
bind -n M-t new-window
# ウィンドウ切り替え
bind -n M-h previous-window
bind -n M-l next-window
# ウィンドウ終了
bind -n M-c kill-window

# ペインを横に分割する
bind p split-window -v -c "#{pane_current_path}"
bind ^p split-window -v -c "#{pane_current_path}"
# ペインを縦に分割する
bind v split-window -h -c "#{pane_current_path}"
bind ^v split-window -h -c "#{pane_current_path}"
# ペインをカーソル移動する
bind h select-pane -L
bind ^h select-pane -L
bind l select-pane -R
bind ^l select-pane -R
bind j select-pane -D
bind ^j select-pane -D
bind k select-pane -U
bind ^k select-pane -U
# ペインを終了
bind c kill-pane
bind ^c kill-pane
# ペインをリサイズする
bind -r < resize-pane -L 5
bind -r ^< resize-pane -L 5
bind -r > resize-pane -R 5
bind -r ^> resize-pane -R 5
bind -r - resize-pane -D 5
bind -r ^- resize-pane -D 5
bind -r + resize-pane -U 5
bind -r ^+ resize-pane -U 5
# ペインをズーム(maximize)する
bind m resize-pane -Z
bind ^m resize-pane -Z

# sessionを終了する
bind x kill-session
bind ^x kill-session

# tmuxを終了する
bind q kill-server
bind ^q kill-server

# コピーモードを設定する
## コピーモードに入る
bind ^[ copy-mode
## 選択を開始する
bind -t vi-copy v begin-selection
## for home
if-shell "which xclip" '\
  bind -t vi-copy y copy-pipe "xclip -i -selection clipboard";\
  bind -t vi-copy Enter copy-pipe "xclip -i -selection clipboard";\
  bind ] run "tmux set-buffer -- \"$(xclip -o -selection clipboard)\"; tmux paste-buffer";\
  bind ^] run "tmux set-buffer -- \"$(xclip -o -selection clipboard)\"; tmux paste-buffer";\
'
## for office
if-shell "uname | grep -q MINGW" '\
  bind -t vi-copy y copy-pipe "cat > /dev/clipboard";\
  bind -t vi-copy Enter copy-pipe "cat > /dev/clipboard";\
  bind ] run "tmux set-buffer -- \"$(cat /dev/clipboard)\"; tmux paste-buffer";\
  bind ^] run "tmux set-buffer -- \"$(cat /dev/clipboard)\"; tmux paste-buffer";\
'
# }}}1

# vim:nofoldenable:

